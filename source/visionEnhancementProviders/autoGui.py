import vision
import driverHandler
import wx
from autoSettingsUtils.utils import StringParameterInfo
from vision.providerBase import VisionEnhancementProviderSettings, SupportedSettingType
from typing import Optional, Type


class AutoGuiTestSettings(VisionEnhancementProviderSettings):

	#: dictionary of the setting id's available when provider is running.
	_availableRuntimeSettings = [
	]

	shouldDoX: bool
	shouldDoY: bool
	amountOfZ: int
	nameOfSomething: str

	availableNameofsomethings = {
		"n1": StringParameterInfo(id="n1", displayName="name one"),
		"n2": StringParameterInfo(id="n2", displayName="name two"),
		"n3": StringParameterInfo(id="n3", displayName="name three"),
		"n4": StringParameterInfo(id="n4", displayName="name four"),
	}

	runtimeOnlySetting: int

	@classmethod
	def getId(cls) -> str:
		return "autoGui"

	@classmethod
	def getTranslatedName(cls) -> str:
		return "Auto Gui"  # Should actually be translated with _() method.

	@classmethod
	def _get_preInitSettings(cls) -> SupportedSettingType:
		return [
			driverHandler.BooleanDriverSetting(
				"shouldDoX",  # value stored in matching property name on class
				"Should Do X",
				defaultVal=True
			),
			driverHandler.BooleanDriverSetting(
				"shouldDoY",  # value stored in matching property name on class
				"Should Do Y",
				defaultVal=False
			),
			driverHandler.NumericDriverSetting(
				"amountOfZ",  # value stored in matching property name on class
				"Amount of Z",
				defaultVal=11
			),
			driverHandler.DriverSetting(
				# options for this come from a property with name generated by
				# f"available{settingID.capitalize()}s"
				# Note:
				#   First letter of Id becomes capital, the rest lowercase.
				#   the 's' character on the end.
				# result: 'availableNameofsomethings'
				"nameOfSomething",  # value stored in matching property name on class
				"Name of something",
			)
		]

	@classmethod
	def clearRuntimeSettings(cls):
		cls._availableRuntimeSettings = []

	@classmethod
	def addRuntimeSettingAvailibility(cls, settingID: str):
		cls._availableRuntimeSettings.append(settingID)

	def _hasFeature(self, settingID: str) -> bool:
		return settingID in AutoGuiTestSettings._availableRuntimeSettings

	def _get_supportedSettings(self) -> SupportedSettingType:
		settings = []
		settings.extend(self.preInitSettings)
		if self._hasFeature("runtimeOnlySetting"):
			settings.extend([
				driverHandler.NumericDriverSetting(
					"runtimeOnlySetting",  # value stored in matching property name on class
					"Runtime Only amount",
					defaultVal=50,
				),
			])
		return settings


class AutoGuiTestProvider(vision.providerBase.VisionEnhancementProvider):
	_settings = AutoGuiTestSettings()

	@classmethod
	def canStart(cls):
		return True  # Check any dependencies (Windows version, Hardware access, Installed applications)

	@classmethod
	def getSettingsPanelClass(cls) -> Optional[Type]:
		"""Returns the instance to be used in order to construct a settings panel for the provider.
		@return: Optional[SettingsPanel]
		@remarks: When None is returned, L{gui.settingsDialogs.VisionProviderSubPanel_Wrapper} is used.
		"""
		return None  # No custom GUI

	@classmethod
	def getSettings(cls) -> AutoGuiTestSettings:
		return cls._settings

	def __init__(self):
		super().__init__()
		result = (
			f"AutoGuiTestProvider:\n"
			f"x: {self._settings.shouldDoX}\n"
			f"y: {self._settings.shouldDoY}\n"
			f"z: {self._settings.amountOfZ}\n"
			f"name: {self._settings.nameOfSomething}\n"
			f"runtimeOnlySetting: {getattr(self, 'runtimeOnlySetting', None)}"
		)
		wx.MessageBox(result, caption="started")
		AutoGuiTestSettings.addRuntimeSettingAvailibility("runtimeOnlySetting")

	def terminate(self):
		AutoGuiTestSettings.clearRuntimeSettings()
		super().terminate()

	def registerEventExtensionPoints(self, extensionPoints):
		pass


VisionEnhancementProvider = AutoGuiTestProvider
